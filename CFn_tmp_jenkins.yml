AWSTemplateFormatVersion: 2010-09-09
Description: 'CFn template for Jenkins CI/CD test'

Resources:
  myVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      InstanceTenancy: default
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'false'
      Tags:
        - Key: Name
          Value: vpc-test
  mySubnetPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: ap-northeast-1a
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: test-subnet-public-a
  myIGW:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: test-igw
  myEC2host:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      Tags:
        - Key: Name
          Value: ansible-host
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          SubnetId: !Ref mySubnetPublic
          GroupSet:
            - !Ref sgansiblehost
  myEC2web:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      Tags:
        - Key: Name
          Value: ansible-web
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          SubnetId: !Ref mySubnetPublic
          GroupSet:
            - !Ref sgansiblehost
  sgansiblehost:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: ansible-host
      VpcId: !Ref myVPC
  gw1:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref myIGW
  subnetroute1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref rtb06af415eb389d9d58
      SubnetId: subnet-0128f4568ca58fb8e
  subnetroute2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref rtb06af415eb389d9d58
      SubnetId: !Ref mySubnetPublic
  route1:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref rtb06af415eb389d9d58
      GatewayId: !Ref myIGW
    DependsOn: gw1
  ingress1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref sgansiblehost
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 0.0.0.0/0
  egress1:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !Ref sgansiblehost
      IpProtocol: '-1'
      CidrIp: 0.0.0.0/0